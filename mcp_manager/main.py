# main.py
import asyncio
import sys
from src.config.config import MCP_SERVERS, LLM_CONFIG
from src.core.mcp_client import MCPProtocolClient
from src.core.mcp_router import LLMProtocolRouter


class MCPApplication:
    """Âü∫‰∫éMCPÂçèËÆÆÁöÑÊô∫ËÉΩÂ∫îÁî® - ÂÆåÂÖ®Ëß£ËÄ¶Êû∂ÊûÑ"""

    def __init__(self):
        self.mcp_client = MCPProtocolClient()
        self.llm_router = LLMProtocolRouter(self.mcp_client, LLM_CONFIG["api_key"])

    async def initialize(self):
        """ÈÄöËøáMCPÂçèËÆÆÂàùÂßãÂåñÊâÄÊúâÊúçÂä°Âô®"""
        print("üöÄ ÂàùÂßãÂåñMCPÂçèËÆÆÁ≥ªÁªü...")

        # ÈÄöËøáÂçèËÆÆÊ≥®ÂÜåÊâÄÊúâÊúçÂä°Âô®
        for server_name, server_url in MCP_SERVERS.items():
            await self.mcp_client.register_server(server_name, server_url)

        # ÊòæÁ§∫ÈÄöËøáÂçèËÆÆÂèëÁé∞ÁöÑÊâÄÊúâÂ∑•ÂÖ∑
        tools = self.mcp_client.get_all_tool_schemas()
        print(f"‚úÖ Á≥ªÁªüÂàùÂßãÂåñÂÆåÊàê! ÈÄöËøáMCPÂçèËÆÆÂèëÁé∞ {len(tools)} ‰∏™Â∑•ÂÖ∑")

        for tool in tools:
            function_info = tool["function"]
            print(f"   üìå {function_info['name']}: {function_info['description']}")

    async def run_interactive(self):
        """ËøêË°å‰∫§‰∫íÂºè‰ºöËØù"""
        print("\n" + "=" * 60)
        print("ü§ñ MCPÂçèËÆÆÊô∫ËÉΩÁ≥ªÁªü (ÂÆåÂÖ®Ëß£ËÄ¶Êû∂ÊûÑ)")
        print("=" * 60)
        print("‚Ä¢ MCPÂÆ¢Êà∑Á´ØÈÄöËøáÂçèËÆÆÂä®ÊÄÅÂèëÁé∞Â∑•ÂÖ∑")
        print("‚Ä¢ LLMÈÄöËøáfunction callingÂÜ≥Á≠ñÂ∑•ÂÖ∑Ë∞ÉÁî®")
        print("‚Ä¢ ÂÆ¢Êà∑Á´Ø‰∏éÊúçÂä°Âô®ÂÆåÂÖ®Ëß£ËÄ¶")
        print("=" * 60)
        print("ËæìÂÖ• 'quit' ÈÄÄÂá∫Á®ãÂ∫è")
        print("=" * 60)

        while True:
            try:
                user_input = input("\nüí¨ Áî®Êà∑ËæìÂÖ•: ").strip()

                if user_input.lower() in ['quit', 'exit', 'ÈÄÄÂá∫']:
                    print("üëã ÂÜçËßÅ!")
                    break

                if not user_input:
                    continue

                # ÈÄöËøáLLMÂíåMCPÂçèËÆÆÂ§ÑÁêÜËØ∑Ê±Ç
                print("üîÑ ÈÄöËøáMCPÂçèËÆÆÂ§ÑÁêÜ‰∏≠...")
                response = await self.llm_router.process_user_request(user_input)
                print(f"üìã Á≥ªÁªüÂõûÂ§ç:\n{response}")

            except KeyboardInterrupt:
                print("\n\nüëã Á®ãÂ∫èË¢´Áî®Êà∑‰∏≠Êñ≠")
                break
            except Exception as e:
                print(f"‚ùå Á≥ªÁªüÈîôËØØ: {e}")

    async def cleanup(self):
        """Ê∏ÖÁêÜÂçèËÆÆËøûÊé•"""
        await self.mcp_client.close_all()


async def main():
    """‰∏ªÂáΩÊï∞"""
    app = MCPApplication()

    try:
        await app.initialize()
        await app.run_interactive()
    finally:
        await app.cleanup()


if __name__ == "__main__":
    if len(sys.argv) > 1:
        # ÂëΩ‰ª§Ë°åÊ®°Âºè
        async def command_line_mode():
            app = MCPApplication()
            await app.initialize()
            user_input = " ".join(sys.argv[1:])
            response = await app.llm_router.process_user_request(user_input)
            print(response)
            await app.cleanup()


        asyncio.run(command_line_mode())
    else:
        # ‰∫§‰∫íÂºèÊ®°Âºè
        asyncio.run(main())